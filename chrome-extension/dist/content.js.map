{"version":3,"file":"content.js","mappings":";mBACA,IAAAA,EAAAC,EAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,aAAA,yBAAAC,EAAAN,EAAAE,EAAAE,EAAAE,GAAA,IAAAC,EAAAL,GAAAA,EAAAM,qBAAAC,EAAAP,EAAAO,EAAAC,EAAAC,OAAAC,OAAAL,EAAAC,WAAA,OAAAK,EAAAH,EAAA,mBAAAV,EAAAE,EAAAE,GAAA,IAAAE,EAAAC,EAAAG,EAAAI,EAAA,EAAAC,EAAAX,GAAA,GAAAY,GAAA,EAAAC,EAAA,CAAAF,EAAA,EAAAb,EAAA,EAAAgB,EAAApB,EAAAqB,EAAAC,EAAAN,EAAAM,EAAAC,KAAAvB,EAAA,GAAAsB,EAAA,SAAArB,EAAAC,GAAA,OAAAM,EAAAP,EAAAQ,EAAA,EAAAG,EAAAZ,EAAAmB,EAAAf,EAAAF,EAAAmB,CAAA,YAAAC,EAAApB,EAAAE,GAAA,IAAAK,EAAAP,EAAAU,EAAAR,EAAAH,EAAA,GAAAiB,GAAAF,IAAAV,GAAAL,EAAAgB,EAAAO,OAAAvB,IAAA,KAAAK,EAAAE,EAAAS,EAAAhB,GAAAqB,EAAAH,EAAAF,EAAAQ,EAAAjB,EAAA,GAAAN,EAAA,GAAAI,EAAAmB,IAAArB,KAAAQ,EAAAJ,GAAAC,EAAAD,EAAA,OAAAC,EAAA,MAAAD,EAAA,GAAAA,EAAA,GAAAR,GAAAQ,EAAA,IAAAc,KAAAhB,EAAAJ,EAAA,GAAAoB,EAAAd,EAAA,KAAAC,EAAA,EAAAU,EAAAC,EAAAhB,EAAAe,EAAAf,EAAAI,EAAA,IAAAc,EAAAG,IAAAnB,EAAAJ,EAAA,GAAAM,EAAA,GAAAJ,GAAAA,EAAAqB,KAAAjB,EAAA,GAAAN,EAAAM,EAAA,GAAAJ,EAAAe,EAAAf,EAAAqB,EAAAhB,EAAA,OAAAH,GAAAJ,EAAA,SAAAmB,EAAA,MAAAH,GAAA,EAAAd,CAAA,iBAAAE,EAAAW,EAAAQ,GAAA,GAAAT,EAAA,QAAAU,UAAA,oCAAAR,GAAA,IAAAD,GAAAK,EAAAL,EAAAQ,GAAAhB,EAAAQ,EAAAL,EAAAa,GAAAxB,EAAAQ,EAAA,EAAAT,EAAAY,KAAAM,GAAA,CAAAV,IAAAC,EAAAA,EAAA,GAAAA,EAAA,IAAAU,EAAAf,GAAA,GAAAkB,EAAAb,EAAAG,IAAAO,EAAAf,EAAAQ,EAAAO,EAAAC,EAAAR,GAAA,OAAAI,EAAA,EAAAR,EAAA,IAAAC,IAAAH,EAAA,QAAAL,EAAAO,EAAAF,GAAA,MAAAL,EAAAA,EAAA0B,KAAAnB,EAAAI,IAAA,MAAAc,UAAA,wCAAAzB,EAAA2B,KAAA,OAAA3B,EAAAW,EAAAX,EAAA4B,MAAApB,EAAA,IAAAA,EAAA,YAAAA,IAAAR,EAAAO,EAAA,SAAAP,EAAA0B,KAAAnB,GAAAC,EAAA,IAAAG,EAAAc,UAAA,oCAAApB,EAAA,YAAAG,EAAA,GAAAD,EAAAR,CAAA,UAAAC,GAAAiB,EAAAC,EAAAf,EAAA,GAAAQ,EAAAV,EAAAyB,KAAAvB,EAAAe,MAAAE,EAAA,YAAApB,GAAAO,EAAAR,EAAAS,EAAA,EAAAG,EAAAX,CAAA,SAAAe,EAAA,UAAAa,MAAA5B,EAAA2B,KAAAV,EAAA,GAAAhB,EAAAI,EAAAE,IAAA,GAAAI,CAAA,KAAAS,EAAA,YAAAV,IAAA,UAAAmB,IAAA,UAAAC,IAAA,CAAA9B,EAAAY,OAAAmB,eAAA,IAAAvB,EAAA,GAAAL,GAAAH,EAAAA,EAAA,GAAAG,QAAAW,EAAAd,EAAA,GAAAG,EAAA,yBAAAH,GAAAW,EAAAmB,EAAArB,UAAAC,EAAAD,UAAAG,OAAAC,OAAAL,GAAA,SAAAO,EAAAhB,GAAA,OAAAa,OAAAoB,eAAApB,OAAAoB,eAAAjC,EAAA+B,IAAA/B,EAAAkC,UAAAH,EAAAhB,EAAAf,EAAAM,EAAA,sBAAAN,EAAAU,UAAAG,OAAAC,OAAAF,GAAAZ,CAAA,QAAA8B,EAAApB,UAAAqB,EAAAhB,EAAAH,EAAA,cAAAmB,GAAAhB,EAAAgB,EAAA,cAAAD,GAAAA,EAAAK,YAAA,oBAAApB,EAAAgB,EAAAzB,EAAA,qBAAAS,EAAAH,GAAAG,EAAAH,EAAAN,EAAA,aAAAS,EAAAH,EAAAR,EAAA,yBAAAW,EAAAH,EAAA,oDAAAwB,EAAA,kBAAAC,EAAA7B,EAAA8B,EAAAtB,EAAA,cAAAD,EAAAf,EAAAE,EAAAE,EAAAH,GAAA,IAAAO,EAAAK,OAAA0B,eAAA,IAAA/B,EAAA,gBAAAR,GAAAQ,EAAA,EAAAO,EAAA,SAAAf,EAAAE,EAAAE,EAAAH,GAAA,SAAAK,EAAAJ,EAAAE,GAAAW,EAAAf,EAAAE,EAAA,SAAAF,GAAA,YAAAwC,QAAAtC,EAAAE,EAAAJ,EAAA,GAAAE,EAAAM,EAAAA,EAAAR,EAAAE,EAAA,CAAA2B,MAAAzB,EAAAqC,YAAAxC,EAAAyC,cAAAzC,EAAA0C,UAAA1C,IAAAD,EAAAE,GAAAE,GAAAE,EAAA,UAAAA,EAAA,WAAAA,EAAA,cAAAS,EAAAf,EAAAE,EAAAE,EAAAH,EAAA,UAAA2C,EAAA1C,EAAAF,GAAA,gBAAAE,GAAA,GAAA2C,MAAAC,QAAA5C,GAAA,OAAAA,CAAA,CAAA6C,CAAA7C,IAAA,SAAAA,EAAAuB,GAAA,IAAAxB,EAAA,MAAAC,EAAA,yBAAAC,QAAAD,EAAAC,OAAAE,WAAAH,EAAA,uBAAAD,EAAA,KAAAD,EAAAI,EAAAI,EAAAI,EAAAS,EAAA,GAAAL,GAAA,EAAAV,GAAA,SAAAE,GAAAP,EAAAA,EAAA0B,KAAAzB,IAAA8C,KAAA,IAAAvB,EAAA,IAAAZ,OAAAZ,KAAAA,EAAA,OAAAe,GAAA,cAAAA,GAAAhB,EAAAQ,EAAAmB,KAAA1B,IAAA2B,QAAAP,EAAA4B,KAAAjD,EAAA6B,OAAAR,EAAAG,SAAAC,GAAAT,GAAA,UAAAd,GAAAI,GAAA,EAAAF,EAAAF,CAAA,iBAAAc,GAAA,MAAAf,EAAA,SAAAW,EAAAX,EAAA,SAAAY,OAAAD,KAAAA,GAAA,kBAAAN,EAAA,MAAAF,CAAA,SAAAiB,CAAA,EAAA6B,CAAAhD,EAAAF,IAAA,SAAAE,EAAAmB,GAAA,GAAAnB,EAAA,qBAAAA,EAAA,OAAAiD,EAAAjD,EAAAmB,GAAA,IAAApB,EAAA,GAAAmD,SAAAzB,KAAAzB,GAAAmD,MAAA,uBAAApD,GAAAC,EAAAoD,cAAArD,EAAAC,EAAAoD,YAAAC,MAAA,QAAAtD,GAAA,QAAAA,EAAA4C,MAAAW,KAAAtD,GAAA,cAAAD,GAAA,2CAAAwD,KAAAxD,GAAAkD,EAAAjD,EAAAmB,QAAA,GAAAqC,CAAAxD,EAAAF,IAAA,qBAAA0B,UAAA,6IAAAiC,EAAA,UAAAR,EAAAjD,EAAAmB,IAAA,MAAAA,GAAAA,EAAAnB,EAAAsB,UAAAH,EAAAnB,EAAAsB,QAAA,QAAAxB,EAAA,EAAAI,EAAAyC,MAAAxB,GAAArB,EAAAqB,EAAArB,IAAAI,EAAAJ,GAAAE,EAAAF,GAAA,OAAAI,CAAA,UAAAwD,EAAAxD,EAAAH,EAAAD,EAAAE,EAAAI,EAAAe,EAAAZ,GAAA,QAAAD,EAAAJ,EAAAiB,GAAAZ,GAAAG,EAAAJ,EAAAqB,KAAA,OAAAzB,GAAA,YAAAJ,EAAAI,EAAA,CAAAI,EAAAoB,KAAA3B,EAAAW,GAAAiD,QAAAC,QAAAlD,GAAAmD,KAAA7D,EAAAI,EAAA,UAAA0D,EAAA5D,GAAA,sBAAAH,EAAA,KAAAD,EAAAiE,UAAA,WAAAJ,QAAA,SAAA3D,EAAAI,GAAA,IAAAe,EAAAjB,EAAA8D,MAAAjE,EAAAD,GAAA,SAAAmE,EAAA/D,GAAAwD,EAAAvC,EAAAnB,EAAAI,EAAA6D,EAAAC,EAAA,OAAAhE,EAAA,UAAAgE,EAAAhE,GAAAwD,EAAAvC,EAAAnB,EAAAI,EAAA6D,EAAAC,EAAA,QAAAhE,EAAA,CAAA+D,OAAA,OAEA,WACI,aAwBA,IACUE,EAwB0B,SAAAC,IAqCnC,OArCmCA,EAAAN,EAAA5B,IAAAE,EAApC,SAAAiC,EAAqCC,GAAO,IAAAC,EAAAC,EAAA,OAAAtC,IAAAC,EAAA,SAAAsC,GAAA,cAAAA,EAAA1D,EAAA0D,EAAAvE,GAAA,OAAAuE,EAAA1D,EAAA,EAAAwD,EAE5BD,EAAQI,KAAID,EAAAvE,EACX,oBADWqE,EACM,EAIjB,qBAJiBA,EAIC,EAIlB,0BAJkBA,EAIK,EAIvB,iBAJuBA,EAIT,EAId,gBAJcA,EAID,yBAAAE,EAAAvE,EAAA,EAfRyE,EAAqBL,GAAQ,cAAAG,EAAAtD,EAAA,oBAAAsD,EAAAvE,EAAA,EAI7B0E,EAAsBN,GAAQ,cAAAG,EAAAtD,EAAA,oBAAAsD,EAAAvE,EAAA,EAI9B2E,EAA0BP,GAAQ,cAAAG,EAAAtD,EAAA,oBAAAsD,EAAAvE,EAAA,EAIlC4E,EAAkBR,GAAQ,cAAAG,EAAAtD,EAAA,oBAAAsD,EAAAvE,EAAA,GAI1B6E,EAAiBT,GAAQ,eAAAG,EAAAtD,EAAA,cAI/B6D,QAAQC,KAAK,wBAAyBX,EAAQI,MAAM,QAAAD,EAAAvE,EAAA,iBAAAuE,EAAA1D,EAAA,GAAAyD,EAAAC,EAAAvD,EAG5D8D,QAAQE,MAAM,yCAAwCV,GAGtDW,OAAOC,YAAY,CACfC,OAAQ,sBACRX,KAAMJ,EAAQI,KAAO,YACrBY,UAAWhB,EAAQgB,UACnBJ,MAAOV,EAAMF,SACda,OAAOI,SAASC,QAAQ,eAAAf,EAAAtD,EAAA,KAAAkD,EAAA,mBAElCL,MAAA,KAAAD,UAAA,UAEcY,EAAoBc,GAAA,OAAAC,EAAA1B,MAAC,KAADD,UAAA,UAAA2B,IAwClC,OAxCkCA,EAAA5B,EAAA5B,IAAAE,EAAnC,SAAAuD,EAAoCrB,GAAO,IAAAsB,EAAAC,EAAA,OAAA3D,IAAAC,EAAA,SAAA2D,GAAA,cAAAA,EAAA/E,EAAA+E,EAAA5F,GAAA,cAAA4F,EAAA/E,EAAA,EAAA+E,EAAA5F,EAAA,EAGZ6F,OAAOC,QAAQC,YAAY,CAC9CvB,KAAM,uBACNc,OAAQL,OAAOI,SAASC,OACxBnC,KAAMiB,EAAQ4B,SAAWC,SAASC,MAClCC,KAAM/B,EAAQgC,SAAWC,MAC3B,OALY,KAARX,EAAQE,EAAA5E,GAODsF,QAAS,CAAFV,EAAA5F,EAAA,QAUhB,OARAiF,OAAOC,YAAY,CACfC,OAAQ,sBACRX,KAAM,mBACNY,UAAWhB,EAAQgB,UACnBmB,UAAWb,EAASa,UACpBD,SAAS,GACVrB,OAAOI,SAASC,QAEnBM,EAAA5F,EAAA,EACMwG,EAAgBvB,OAAOI,SAASC,OAAQ,CAC1CnC,KAAMiB,EAAQ4B,SAAWC,SAASC,MAClCC,KAAM/B,EAAQgC,SAAWC,IACzBI,YAAaC,KAAKC,QACpB,OAAAf,EAAA5F,EAAA,qBAGI,IAAI4G,MAAMlB,EAASV,OAAS,uBAAsB,OAAAY,EAAA5F,EAAA,eAAA4F,EAAA/E,EAAA,EAAA8E,EAAAC,EAAA5E,EAI5DiE,OAAOC,YAAY,CACfC,OAAQ,sBACRX,KAAM,mBACNY,UAAWhB,EAAQgB,UACnBJ,MAAOW,EAAMvB,QACbkC,SAAS,GACVrB,OAAOI,SAASC,QAAQ,cAAAM,EAAA3E,EAAA,KAAAwE,EAAA,kBAElC3B,MAAA,KAAAD,UAAA,UAEca,EAAqBmC,GAAA,OAAAC,EAAAhD,MAAC,KAADD,UAAA,UAAAiD,IAsCnC,OAtCmCA,EAAAlD,EAAA5B,IAAAE,EAApC,SAAA6E,EAAqC3C,GAAO,IAAAsB,EAAAsB,EAAA,OAAAhF,IAAAC,EAAA,SAAAgF,GAAA,cAAAA,EAAApG,EAAAoG,EAAAjH,GAAA,cAAAiH,EAAApG,EAAA,EAAAoG,EAAAjH,EAAA,EAGVkH,EAAgBjC,OAAOI,SAASC,QAAO,OAAhD,GAAA2B,EAAAjG,EACC,CAAFiG,EAAAjH,EAAA,cACN,IAAI4G,MAAM,8BAA6B,cAAAK,EAAAjH,EAAA,EAI1B6F,OAAOC,QAAQC,YAAY,CAC9CvB,KAAM,wBACNc,OAAQL,OAAOI,SAASC,OACxB6B,YAAa/C,EAAQ+C,YACrB/C,QAASA,EAAQA,UACnB,OALY,KAARsB,EAAQuB,EAAAjG,GAODsF,QAAS,CAAFW,EAAAjH,EAAA,QAChBiF,OAAOC,YAAY,CACfC,OAAQ,sBACRX,KAAM,4BACNY,UAAWhB,EAAQgB,UACnBgC,UAAW1B,EAAS0B,UACpBb,UAAWb,EAASa,UACpBD,SAAS,GACVrB,OAAOI,SAASC,QAAQ2B,EAAAjH,EAAA,qBAErB,IAAI4G,MAAMlB,EAASV,OAAS,8BAA6B,OAAAiC,EAAAjH,EAAA,eAAAiH,EAAApG,EAAA,EAAAmG,EAAAC,EAAAjG,EAInEiE,OAAOC,YAAY,CACfC,OAAQ,sBACRX,KAAM,4BACNY,UAAWhB,EAAQgB,UACnBJ,MAAOgC,EAAM5C,QACbkC,SAAS,GACVrB,OAAOI,SAASC,QAAQ,cAAA2B,EAAAhG,EAAA,KAAA8F,EAAA,kBAElCjD,MAAA,KAAAD,UAAA,UAEcc,EAAyB0C,GAAA,OAAAC,EAAAxD,MAAC,KAADD,UAAA,UAAAyD,IAoCvC,OApCuCA,EAAA1D,EAAA5B,IAAAE,EAAxC,SAAAqF,EAAyCnD,GAAO,IAAAsB,EAAA8B,EAAA,OAAAxF,IAAAC,EAAA,SAAAwF,GAAA,cAAAA,EAAA5G,EAAA4G,EAAAzH,GAAA,cAAAyH,EAAA5G,EAAA,EAAA4G,EAAAzH,EAAA,EAEdkH,EAAgBjC,OAAOI,SAASC,QAAO,OAAhD,GAAAmC,EAAAzG,EACC,CAAFyG,EAAAzH,EAAA,cACN,IAAI4G,MAAM,8BAA6B,cAAAa,EAAAzH,EAAA,EAG1B6F,OAAOC,QAAQC,YAAY,CAC9CvB,KAAM,6BACNc,OAAQL,OAAOI,SAASC,OACxBoC,aAActD,EAAQsD,aACtBtD,QAASA,EAAQA,UACnB,OALY,KAARsB,EAAQ+B,EAAAzG,GAODsF,QAAS,CAAFmB,EAAAzH,EAAA,QAChBiF,OAAOC,YAAY,CACfC,OAAQ,sBACRX,KAAM,iCACNY,UAAWhB,EAAQgB,UACnBuC,WAAYjC,EAASiC,WACrBpB,UAAWb,EAASa,UACpBD,SAAS,GACVrB,OAAOI,SAASC,QAAQmC,EAAAzH,EAAA,qBAErB,IAAI4G,MAAMlB,EAASV,OAAS,8BAA6B,OAAAyC,EAAAzH,EAAA,eAAAyH,EAAA5G,EAAA,EAAA2G,EAAAC,EAAAzG,EAInEiE,OAAOC,YAAY,CACfC,OAAQ,sBACRX,KAAM,iCACNY,UAAWhB,EAAQgB,UACnBJ,MAAOwC,EAAMpD,QACbkC,SAAS,GACVrB,OAAOI,SAASC,QAAQ,cAAAmC,EAAAxG,EAAA,KAAAsG,EAAA,kBAElCzD,MAAA,KAAAD,UAAA,UAEce,EAAiBgD,GAAA,OAAAC,EAAA/D,MAAC,KAADD,UAAA,UAAAgE,IAoC/B,OApC+BA,EAAAjE,EAAA5B,IAAAE,EAAhC,SAAA4F,EAAiC1D,GAAO,IAAAsB,EAAAqC,EAAA,OAAA/F,IAAAC,EAAA,SAAA+F,GAAA,cAAAA,EAAAnH,EAAAmH,EAAAhI,GAAA,cAAAgI,EAAAnH,EAAA,EAAAmH,EAAAhI,EAAA,EAENkH,EAAgBjC,OAAOI,SAASC,QAAO,OAAhD,GAAA0C,EAAAhH,EACC,CAAFgH,EAAAhI,EAAA,cACN,IAAI4G,MAAM,8BAA6B,cAAAoB,EAAAhI,EAAA,EAG1B6F,OAAOC,QAAQC,YAAY,CAC9CvB,KAAM,oBACNc,OAAQL,OAAOI,SAASC,OACxBlB,QAASA,EAAQA,QACjB6D,QAAS7D,EAAQ6D,UACnB,OALY,KAARvC,EAAQsC,EAAAhH,GAODsF,QAAS,CAAF0B,EAAAhI,EAAA,QAChBiF,OAAOC,YAAY,CACfC,OAAQ,sBACRX,KAAM,wBACNY,UAAWhB,EAAQgB,UACnBgC,UAAW1B,EAAS0B,UACpBb,UAAWb,EAASa,UACpBD,SAAS,GACVrB,OAAOI,SAASC,QAAQ0C,EAAAhI,EAAA,qBAErB,IAAI4G,MAAMlB,EAASV,OAAS,0BAAyB,OAAAgD,EAAAhI,EAAA,eAAAgI,EAAAnH,EAAA,EAAAkH,EAAAC,EAAAhH,EAI/DiE,OAAOC,YAAY,CACfC,OAAQ,sBACRX,KAAM,wBACNY,UAAWhB,EAAQgB,UACnBJ,MAAO+C,EAAM3D,QACbkC,SAAS,GACVrB,OAAOI,SAASC,QAAQ,cAAA0C,EAAA/G,EAAA,KAAA6G,EAAA,kBAElChE,MAAA,KAAAD,UAAA,UAEcgB,EAAgBqD,GAAA,OAAAC,EAAArE,MAAC,KAADD,UAAA,UAAAsE,IAgC9B,OAhC8BA,EAAAvE,EAAA5B,IAAAE,EAA/B,SAAAkG,EAAgChE,GAAO,IAAAsB,EAAA2C,EAAA,OAAArG,IAAAC,EAAA,SAAAqG,GAAA,cAAAA,EAAAzH,EAAAyH,EAAAtI,GAAA,cAAAsI,EAAAzH,EAAA,EAAAyH,EAAAtI,EAAA,EAELkH,EAAgBjC,OAAOI,SAASC,QAAO,OAAhD,GAAAgD,EAAAtH,EACC,CAAFsH,EAAAtI,EAAA,cACN,IAAI4G,MAAM,8BAA6B,cAAA0B,EAAAtI,EAAA,EAG1B6F,OAAOC,QAAQC,YAAY,CAC9CvB,KAAM,sBACR,OAFY,KAARkB,EAAQ4C,EAAAtH,GAIDsF,UAAWZ,EAAS6C,YAAW,CAAAD,EAAAtI,EAAA,QACxCiF,OAAOC,YAAY,CACfC,OAAQ,sBACRX,KAAM,uBACNY,UAAWhB,EAAQgB,UACnBmB,UAAWb,EAAS8C,OAAOjC,UAC3BD,SAAS,GACVrB,OAAOI,SAASC,QAAQgD,EAAAtI,EAAA,qBAErB,IAAI4G,MAAM,wBAAuB,OAAA0B,EAAAtI,EAAA,eAAAsI,EAAAzH,EAAA,EAAAwH,EAAAC,EAAAtH,EAI3CiE,OAAOC,YAAY,CACfC,OAAQ,sBACRX,KAAM,uBACNY,UAAWhB,EAAQgB,UACnBJ,MAAOqD,EAAMjE,QACbkC,SAAS,GACVrB,OAAOI,SAASC,QAAQ,cAAAgD,EAAArH,EAAA,KAAAmH,EAAA,kBAElCtE,MAAA,KAAAD,UAAA,UAEcqD,EAAeuB,GAAA,OAAAC,EAAA5E,MAAC,KAADD,UAAA,UAAA6E,IAS7B,OAT6BA,EAAA9E,EAAA5B,IAAAE,EAA9B,SAAAyG,EAA+BrD,GAAM,IAAAsD,EAAAC,EAAAC,EAAA,OAAA9G,IAAAC,EAAA,SAAA8G,GAAA,cAAAA,EAAAlI,EAAAkI,EAAA/I,GAAA,cAAA+I,EAAAlI,EAAA,EAAAkI,EAAA/I,EAAA,EAER6F,OAAOmD,QAAQC,MAAMC,IAAI,CAAC,oBAAmB,OAClB,OAD1CN,EAAMG,EAAA/H,EACN6H,EAAcD,EAAOO,iBAAmB,CAAC,EAACJ,EAAA9H,EAAA,IACvC4H,EAAYvD,IAAO,OAEoB,OAFpByD,EAAAlI,EAAA,EAAAiI,EAAAC,EAAA/H,EAE5B8D,QAAQE,MAAM,0BAAyB8D,GAASC,EAAA9H,EAAA,GACzC,GAAK,EAAA0H,EAAA,kBAEnB7E,MAAA,KAAAD,UAAA,UAEc2C,EAAe4C,EAAAC,GAAA,OAAAC,EAAAxF,MAAC,KAADD,UAAA,UAAAyF,IAW7B,OAX6BA,EAAA1F,EAAA5B,IAAAE,EAA9B,SAAAqH,EAA+BjE,EAAQkE,GAAc,IAAAZ,EAAAC,EAAAY,EAAA,OAAAzH,IAAAC,EAAA,SAAAyH,GAAA,cAAAA,EAAA7I,EAAA6I,EAAA1J,GAAA,cAAA0J,EAAA7I,EAAA,EAAA6I,EAAA1J,EAAA,EAExB6F,OAAOmD,QAAQC,MAAMC,IAAI,CAAC,oBAAmB,OAG7B,OAH/BN,EAAMc,EAAA1I,GACN6H,EAAcD,EAAOO,iBAAmB,CAAC,GAEnC7D,GAAUkE,EAAeE,EAAA1J,EAAA,EAE/B6F,OAAOmD,QAAQC,MAAMU,IAAI,CAAER,gBAAiBN,IAAc,OAAAa,EAAA1J,EAAA,eAAA0J,EAAA7I,EAAA,EAAA4I,EAAAC,EAAA1I,EAEhE8D,QAAQE,MAAM,0BAAyByE,GAAS,cAAAC,EAAAzI,EAAA,KAAAsI,EAAA,kBAEvDzF,MAAA,KAAAD,UAAA,CAED,SAASwC,IACL,IAAMuD,EAAU3D,SAAS4D,cAAc,+CACvC,OAAID,EACOA,EAAQE,KAIZ,GAAPC,OAAU9E,OAAOI,SAASC,OAAM,eACpC,CAuDA,SAAA0E,IAFC,OAEDA,EAAApG,EAAA5B,IAAAE,EAvBA,SAAA+H,IAAA,IAAAvE,EAAAwE,EAAA,OAAAlI,IAAAC,EAAA,SAAAkI,GAAA,cAAAA,EAAAtJ,EAAAsJ,EAAAnK,GAAA,cAAAmK,EAAAtJ,EAAA,EAAAsJ,EAAAnK,EAAA,EAEkCkH,EAAgBjC,OAAOI,SAASC,QAAO,OAAhD,IAAA6E,EAAAnJ,EACA,CAAFmJ,EAAAnK,EAAA,eAAAmK,EAAAnK,EAAA,EAEY6F,OAAOC,QAAQC,YAAY,CAC9CvB,KAAM,sBACR,QAFIkB,EAAQyE,EAAAnJ,GAIDsF,SAAWZ,EAAS6C,aAE7BtD,OAAOC,YAAY,CACfC,OAAQ,sBACRX,KAAM,iBACN+B,UAAWb,EAAS8C,OAAOjC,WAC5BtB,OAAOI,SAASC,QACtB,OAAA6E,EAAAnK,EAAA,eAAAmK,EAAAtJ,EAAA,EAAAqJ,EAAAC,EAAAnJ,EAGL8D,QAAQE,MAAM,sBAAqBkF,GAAS,cAAAC,EAAAlJ,EAAA,KAAAgJ,EAAA,kBAEnDnG,MAAA,KAAAD,UAAA,CA3WDiB,QAAQsF,IAAI,yCASyB,WAA7BnF,OAAOI,SAASgF,UAAsD,cAA7BpF,OAAOI,SAASiF,cAKzDrF,OAAOsF,QAAUtF,OAAOuF,SAAWvF,OAAOwF,YAC1C3F,QAAQsF,IAAI,8CACL,OAOLnG,EAASgC,SAASyE,cAAc,WAC/BC,IAAM9E,OAAOC,QAAQ8E,OAAO,eACnC3G,EAAO4G,OAAS,WACZC,KAAKC,QACT,GAGC9E,SAAS+E,MAAQ/E,SAASgF,iBAAiBC,YAAYjH,GAExDa,QAAQsF,IAAI,oCAIhBnF,OAAOkG,iBAAiB,UAAW,SAASC,GAEpCA,EAAMjG,SAAWF,QAAUmG,EAAM9F,SAAWL,OAAOI,SAASC,QAI5D8F,EAAMC,MAA8B,yBAAtBD,EAAMC,KAAKlG,QAG9B,SAEiCmG,GAAApH,EAAAJ,MAAC,KAADD,UAAA,CAJ5B0H,CAAsBH,EAAMC,KAEpC,GA4QAxF,OAAOC,QAAQ0F,UAAUC,YAAY,SAACrH,EAASsH,EAAQC,GAC9B,wBAAjBvH,EAAQI,MAERS,OAAOC,YAAY,CACfC,OAAQ,sBACRX,KAAM,uBACPS,OAAOI,SAASC,QAGF,oBAAjBlB,EAAQI,MAERS,OAAOC,YAAY,CACfC,OAAQ,sBACRX,KAAM,kBACN+B,UAAWnC,EAAQmC,WACpBtB,OAAOI,SAASC,QAGF,oBAAjBlB,EAAQI,MAERS,OAAOC,YAAY,CACfC,OAAQ,sBACRX,KAAM,kBACNoH,QAASxH,EAAQwH,SAClB3G,OAAOI,SAASC,OAE3B,GA2BAuG,WAzBA,WAC0B,OAAA7B,EAAAlG,MAAC,KAADD,UAAA,EAwBF,KAGxBiI,YAAWlI,EAAA5B,IAAAE,EAAC,SAAA6J,IAAA,IAAAnD,EAAAC,EAAAmD,EAAAC,EAAAC,EAAAC,EAAAC,EAAA9G,EAAA+G,EAAA,OAAArK,IAAAC,EAAA,SAAAqK,GAAA,cAAAA,EAAAzL,EAAAyL,EAAAtM,GAAA,cAAAsM,EAAAzL,EAAA,EAAAyL,EAAAtM,EAAA,EAEiB6F,OAAOmD,QAAQC,MAAMC,IAAI,CAAC,oBAAmB,OAOlE,IAPMN,EAAM0D,EAAAtL,EACN6H,EAAcD,EAAOO,iBAAmB,CAAC,EAGzC6C,EAAgBtF,KAAKC,MAAS,OAChCsF,GAAa,EAEjBC,EAAA,EAAAC,EAAmC1L,OAAO8L,QAAQ1D,GAAYqD,EAAAC,EAAA/K,OAAA8K,IAAEE,EAAA5J,EAAA2J,EAAAD,GAAA,GAApD5G,EAAM8G,EAAA,GAAYA,EAAA,GACX3F,YAAcuF,WAClBnD,EAAYvD,GACnB2G,GAAa,GAEpB,IAEGA,EAAY,CAAFK,EAAAtM,EAAA,eAAAsM,EAAAtM,EAAA,EACJ6F,OAAOmD,QAAQC,MAAMU,IAAI,CAAER,gBAAiBN,IAAc,OAAAyD,EAAAtM,EAAA,eAAAsM,EAAAzL,EAAA,EAAAwL,EAAAC,EAAAtL,EAIpE8D,QAAQE,MAAM,4BAA2BqH,GAAS,cAAAC,EAAArL,EAAA,KAAA8K,EAAA,iBAEvD,IAEN,CA7YD,E","sources":["webpack://gado-wallet-extension/./src/content.js"],"sourcesContent":["// gado Wallet Chrome Extension - Content Script\n// Injects wallet provider into web pages for dApp interaction\n\n(function() {\n    'use strict';\n\n    console.log('🔗 gado Wallet content script loaded');\n\n    // Check if we should inject wallet provider\n    if (shouldInjectProvider()) {\n        injectWalletProvider();\n    }\n\n    function shouldInjectProvider() {\n        // Don't inject on extension pages or non-https pages\n        if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost') {\n            return false;\n        }\n        \n        // Don't inject if another wallet is already present\n        if (window.solana || window.phantom || window.solflare) {\n            console.log('🚫 Another Solana wallet already detected');\n            return false;\n        }\n        \n        return true;\n    }\n\n    function injectWalletProvider() {\n        const script = document.createElement('script');\n        script.src = chrome.runtime.getURL('injected.js');\n        script.onload = function() {\n            this.remove();\n        };\n        \n        // Inject before any other scripts\n        (document.head || document.documentElement).appendChild(script);\n        \n        console.log('✅ gado Wallet provider injected');\n    }\n\n    // Listen for messages from injected script\n    window.addEventListener('message', function(event) {\n        // Only accept messages from same origin\n        if (event.source !== window || event.origin !== window.location.origin) {\n            return;\n        }\n\n        if (event.data && event.data.source === 'gada-wallet-injected') {\n            handleInjectedMessage(event.data);\n        }\n    });\n\n    async function handleInjectedMessage(message) {\n        try {\n            switch (message.type) {\n                case 'CONNECT_REQUEST':\n                    await handleConnectRequest(message);\n                    break;\n                \n                case 'SIGN_TRANSACTION':\n                    await handleSignTransaction(message);\n                    break;\n                \n                case 'SIGN_ALL_TRANSACTIONS':\n                    await handleSignAllTransactions(message);\n                    break;\n                \n                case 'SIGN_MESSAGE':\n                    await handleSignMessage(message);\n                    break;\n                \n                case 'GET_ACCOUNT':\n                    await handleGetAccount(message);\n                    break;\n                \n                default:\n                    console.warn('Unknown message type:', message.type);\n            }\n        } catch (error) {\n            console.error('Content script message handling error:', error);\n            \n            // Send error response back to injected script\n            window.postMessage({\n                source: 'gada-wallet-content',\n                type: message.type + '_RESPONSE',\n                requestId: message.requestId,\n                error: error.message\n            }, window.location.origin);\n        }\n    }\n\n    async function handleConnectRequest(message) {\n        try {\n            // Request connection approval from user\n            const response = await chrome.runtime.sendMessage({\n                type: 'DAPP_CONNECT_REQUEST',\n                origin: window.location.origin,\n                name: message.appName || document.title,\n                icon: message.appIcon || getFaviconUrl()\n            });\n\n            if (response.success) {\n                // Send successful connection response\n                window.postMessage({\n                    source: 'gada-wallet-content',\n                    type: 'CONNECT_RESPONSE',\n                    requestId: message.requestId,\n                    publicKey: response.publicKey,\n                    success: true\n                }, window.location.origin);\n                \n                // Store connection for this origin\n                await storeConnection(window.location.origin, {\n                    name: message.appName || document.title,\n                    icon: message.appIcon || getFaviconUrl(),\n                    connectedAt: Date.now()\n                });\n                \n            } else {\n                throw new Error(response.error || 'Connection rejected');\n            }\n            \n        } catch (error) {\n            window.postMessage({\n                source: 'gada-wallet-content',\n                type: 'CONNECT_RESPONSE',\n                requestId: message.requestId,\n                error: error.message,\n                success: false\n            }, window.location.origin);\n        }\n    }\n\n    async function handleSignTransaction(message) {\n        try {\n            // Check if origin is connected\n            const isConnected = await checkConnection(window.location.origin);\n            if (!isConnected) {\n                throw new Error('Not connected to this dApp');\n            }\n\n            // Request transaction signing\n            const response = await chrome.runtime.sendMessage({\n                type: 'DAPP_SIGN_TRANSACTION',\n                origin: window.location.origin,\n                transaction: message.transaction,\n                message: message.message\n            });\n\n            if (response.success) {\n                window.postMessage({\n                    source: 'gada-wallet-content',\n                    type: 'SIGN_TRANSACTION_RESPONSE',\n                    requestId: message.requestId,\n                    signature: response.signature,\n                    publicKey: response.publicKey,\n                    success: true\n                }, window.location.origin);\n            } else {\n                throw new Error(response.error || 'Transaction signing failed');\n            }\n            \n        } catch (error) {\n            window.postMessage({\n                source: 'gada-wallet-content',\n                type: 'SIGN_TRANSACTION_RESPONSE',\n                requestId: message.requestId,\n                error: error.message,\n                success: false\n            }, window.location.origin);\n        }\n    }\n\n    async function handleSignAllTransactions(message) {\n        try {\n            const isConnected = await checkConnection(window.location.origin);\n            if (!isConnected) {\n                throw new Error('Not connected to this dApp');\n            }\n\n            const response = await chrome.runtime.sendMessage({\n                type: 'DAPP_SIGN_ALL_TRANSACTIONS',\n                origin: window.location.origin,\n                transactions: message.transactions,\n                message: message.message\n            });\n\n            if (response.success) {\n                window.postMessage({\n                    source: 'gada-wallet-content',\n                    type: 'SIGN_ALL_TRANSACTIONS_RESPONSE',\n                    requestId: message.requestId,\n                    signatures: response.signatures,\n                    publicKey: response.publicKey,\n                    success: true\n                }, window.location.origin);\n            } else {\n                throw new Error(response.error || 'Transaction signing failed');\n            }\n            \n        } catch (error) {\n            window.postMessage({\n                source: 'gada-wallet-content',\n                type: 'SIGN_ALL_TRANSACTIONS_RESPONSE',\n                requestId: message.requestId,\n                error: error.message,\n                success: false\n            }, window.location.origin);\n        }\n    }\n\n    async function handleSignMessage(message) {\n        try {\n            const isConnected = await checkConnection(window.location.origin);\n            if (!isConnected) {\n                throw new Error('Not connected to this dApp');\n            }\n\n            const response = await chrome.runtime.sendMessage({\n                type: 'DAPP_SIGN_MESSAGE',\n                origin: window.location.origin,\n                message: message.message,\n                display: message.display\n            });\n\n            if (response.success) {\n                window.postMessage({\n                    source: 'gada-wallet-content',\n                    type: 'SIGN_MESSAGE_RESPONSE',\n                    requestId: message.requestId,\n                    signature: response.signature,\n                    publicKey: response.publicKey,\n                    success: true\n                }, window.location.origin);\n            } else {\n                throw new Error(response.error || 'Message signing failed');\n            }\n            \n        } catch (error) {\n            window.postMessage({\n                source: 'gada-wallet-content',\n                type: 'SIGN_MESSAGE_RESPONSE',\n                requestId: message.requestId,\n                error: error.message,\n                success: false\n            }, window.location.origin);\n        }\n    }\n\n    async function handleGetAccount(message) {\n        try {\n            const isConnected = await checkConnection(window.location.origin);\n            if (!isConnected) {\n                throw new Error('Not connected to this dApp');\n            }\n\n            const response = await chrome.runtime.sendMessage({\n                type: 'GET_WALLET_STATUS'\n            });\n\n            if (response.success && response.isConnected) {\n                window.postMessage({\n                    source: 'gada-wallet-content',\n                    type: 'GET_ACCOUNT_RESPONSE',\n                    requestId: message.requestId,\n                    publicKey: response.wallet.publicKey,\n                    success: true\n                }, window.location.origin);\n            } else {\n                throw new Error('Wallet not connected');\n            }\n            \n        } catch (error) {\n            window.postMessage({\n                source: 'gada-wallet-content',\n                type: 'GET_ACCOUNT_RESPONSE',\n                requestId: message.requestId,\n                error: error.message,\n                success: false\n            }, window.location.origin);\n        }\n    }\n\n    async function checkConnection(origin) {\n        try {\n            const result = await chrome.storage.local.get(['dappConnections']);\n            const connections = result.dappConnections || {};\n            return !!connections[origin];\n        } catch (error) {\n            console.error('Connection check error:', error);\n            return false;\n        }\n    }\n\n    async function storeConnection(origin, connectionData) {\n        try {\n            const result = await chrome.storage.local.get(['dappConnections']);\n            const connections = result.dappConnections || {};\n            \n            connections[origin] = connectionData;\n            \n            await chrome.storage.local.set({ dappConnections: connections });\n        } catch (error) {\n            console.error('Store connection error:', error);\n        }\n    }\n\n    function getFaviconUrl() {\n        const favicon = document.querySelector('link[rel=\"icon\"], link[rel=\"shortcut icon\"]');\n        if (favicon) {\n            return favicon.href;\n        }\n        \n        // Default favicon location\n        return `${window.location.origin}/favicon.ico`;\n    }\n\n    // Listen for wallet events from background script\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        if (message.type === 'WALLET_DISCONNECTED') {\n            // Notify dApp that wallet was disconnected\n            window.postMessage({\n                source: 'gada-wallet-content',\n                type: 'WALLET_DISCONNECTED'\n            }, window.location.origin);\n        }\n        \n        if (message.type === 'ACCOUNT_CHANGED') {\n            // Notify dApp about account change\n            window.postMessage({\n                source: 'gada-wallet-content',\n                type: 'ACCOUNT_CHANGED',\n                publicKey: message.publicKey\n            }, window.location.origin);\n        }\n        \n        if (message.type === 'NETWORK_CHANGED') {\n            // Notify dApp about network change\n            window.postMessage({\n                source: 'gada-wallet-content',\n                type: 'NETWORK_CHANGED',\n                network: message.network\n            }, window.location.origin);\n        }\n    });\n\n    // Auto-connect to previously connected dApps\n    async function autoConnect() {\n        try {\n            const isConnected = await checkConnection(window.location.origin);\n            if (isConnected) {\n                // Get current wallet status\n                const response = await chrome.runtime.sendMessage({\n                    type: 'GET_WALLET_STATUS'\n                });\n\n                if (response.success && response.isConnected) {\n                    // Notify dApp about auto-connection\n                    window.postMessage({\n                        source: 'gada-wallet-content',\n                        type: 'AUTO_CONNECTED',\n                        publicKey: response.wallet.publicKey\n                    }, window.location.origin);\n                }\n            }\n        } catch (error) {\n            console.error('Auto-connect error:', error);\n        }\n    }\n\n    // Run auto-connect after a short delay to ensure dApp is ready\n    setTimeout(autoConnect, 1000);\n\n    // Clean up disconnected dApps periodically\n    setInterval(async () => {\n        try {\n            const result = await chrome.storage.local.get(['dappConnections']);\n            const connections = result.dappConnections || {};\n            \n            // Remove connections older than 30 days\n            const thirtyDaysAgo = Date.now() - (30 * 24 * 60 * 60 * 1000);\n            let hasChanges = false;\n            \n            for (const [origin, connection] of Object.entries(connections)) {\n                if (connection.connectedAt < thirtyDaysAgo) {\n                    delete connections[origin];\n                    hasChanges = true;\n                }\n            }\n            \n            if (hasChanges) {\n                await chrome.storage.local.set({ dappConnections: connections });\n            }\n            \n        } catch (error) {\n            console.error('Connection cleanup error:', error);\n        }\n    }, 60000); // Check every minute\n\n})();"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_invoke","enumerable","configurable","writable","_slicedToArray","Array","isArray","_arrayWithHoles","next","push","_iterableToArrayLimit","_arrayLikeToArray","toString","slice","constructor","name","from","test","_unsupportedIterableToArray","_nonIterableRest","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","script","_handleInjectedMessage","_callee2","message","_t2","_t3","_context2","type","handleConnectRequest","handleSignTransaction","handleSignAllTransactions","handleSignMessage","handleGetAccount","console","warn","error","window","postMessage","source","requestId","location","origin","_x2","_handleConnectRequest","_callee3","response","_t4","_context3","chrome","runtime","sendMessage","appName","document","title","icon","appIcon","getFaviconUrl","success","publicKey","storeConnection","connectedAt","Date","now","Error","_x3","_handleSignTransaction","_callee4","_t5","_context4","checkConnection","transaction","signature","_x4","_handleSignAllTransactions","_callee5","_t6","_context5","transactions","signatures","_x5","_handleSignMessage","_callee6","_t7","_context6","display","_x6","_handleGetAccount","_callee7","_t8","_context7","isConnected","wallet","_x7","_checkConnection","_callee8","result","connections","_t9","_context8","storage","local","get","dappConnections","_x8","_x9","_storeConnection","_callee9","connectionData","_t0","_context9","set","favicon","querySelector","href","concat","_autoConnect","_callee0","_t1","_context0","log","protocol","hostname","solana","phantom","solflare","createElement","src","getURL","onload","this","remove","head","documentElement","appendChild","addEventListener","event","data","_x","handleInjectedMessage","onMessage","addListener","sender","sendResponse","network","setTimeout","setInterval","_callee","thirtyDaysAgo","hasChanges","_i","_Object$entries","_Object$entries$_i","_t","_context","entries"],"sourceRoot":""}