{"version":3,"file":"injected.js","mappings":"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","sources":["webpack://gado-wallet-extension/./src/injected.js"],"sourcesContent":["// gado Wallet Chrome Extension - Injected Script\n// Provides Solana wallet interface to dApps\n\n(function() {\n    'use strict';\n\n    // Don't inject if already present\n    if (window.solana && window.solana.isgadoWallet) {\n        console.log('🚫 gado Wallet already injected');\n        return;\n    }\n\n    console.log('🔗 Injecting gado Wallet provider...');\n\n    let requestId = 0;\n    const pendingRequests = new Map();\n\n    // Create gado Wallet provider\n    class gadoWalletProvider {\n        constructor() {\n            this.isgadoWallet = true;\n            this.isPhantom = false; // For compatibility\n            this._publicKey = null;\n            this._connected = false;\n            this._connecting = false;\n            this._readyState = 'NotDetected';\n            \n            this.setupMessageListener();\n            this.checkAutoConnect();\n        }\n\n        get publicKey() {\n            return this._publicKey;\n        }\n\n        get connected() {\n            return this._connected;\n        }\n\n        get readyState() {\n            return this._readyState;\n        }\n\n        setupMessageListener() {\n            window.addEventListener('message', (event) => {\n                if (event.source !== window || event.origin !== window.location.origin) {\n                    return;\n                }\n\n                if (event.data && event.data.source === 'gada-wallet-content') {\n                    this.handleMessage(event.data);\n                }\n            });\n        }\n\n        handleMessage(message) {\n            switch (message.type) {\n                case 'CONNECT_RESPONSE':\n                    this.handleConnectResponse(message);\n                    break;\n                \n                case 'SIGN_TRANSACTION_RESPONSE':\n                    this.handleSignTransactionResponse(message);\n                    break;\n                \n                case 'SIGN_ALL_TRANSACTIONS_RESPONSE':\n                    this.handleSignAllTransactionsResponse(message);\n                    break;\n                \n                case 'SIGN_MESSAGE_RESPONSE':\n                    this.handleSignMessageResponse(message);\n                    break;\n                \n                case 'GET_ACCOUNT_RESPONSE':\n                    this.handleGetAccountResponse(message);\n                    break;\n                \n                case 'AUTO_CONNECTED':\n                    this.handleAutoConnected(message);\n                    break;\n                \n                case 'WALLET_DISCONNECTED':\n                    this.handleDisconnected();\n                    break;\n                \n                case 'ACCOUNT_CHANGED':\n                    this.handleAccountChanged(message);\n                    break;\n                \n                case 'NETWORK_CHANGED':\n                    this.handleNetworkChanged(message);\n                    break;\n            }\n        }\n\n        async connect(options = {}) {\n            if (this._connected) {\n                return { publicKey: this._publicKey };\n            }\n\n            if (this._connecting) {\n                // Wait for existing connection attempt\n                return new Promise((resolve, reject) => {\n                    const checkConnection = () => {\n                        if (this._connected) {\n                            resolve({ publicKey: this._publicKey });\n                        } else if (!this._connecting) {\n                            reject(new Error('Connection failed'));\n                        } else {\n                            setTimeout(checkConnection, 100);\n                        }\n                    };\n                    checkConnection();\n                });\n            }\n\n            this._connecting = true;\n\n            try {\n                const requestData = {\n                    source: 'gada-wallet-injected',\n                    type: 'CONNECT_REQUEST',\n                    requestId: ++requestId,\n                    appName: options.name || document.title,\n                    appIcon: options.icon || this.getFaviconUrl(),\n                    onlyIfTrusted: options.onlyIfTrusted || false\n                };\n\n                const response = await this.sendRequest(requestData);\n                \n                if (response.success) {\n                    this._publicKey = this.createPublicKey(response.publicKey);\n                    this._connected = true;\n                    this._readyState = 'Connected';\n                    \n                    this.emit('connect', this._publicKey);\n                    \n                    return { publicKey: this._publicKey };\n                } else {\n                    throw new Error(response.error || 'Connection failed');\n                }\n            } finally {\n                this._connecting = false;\n            }\n        }\n\n        async disconnect() {\n            if (!this._connected) {\n                return;\n            }\n\n            this._publicKey = null;\n            this._connected = false;\n            this._readyState = 'NotDetected';\n            \n            this.emit('disconnect');\n        }\n\n        async signTransaction(transaction) {\n            if (!this._connected) {\n                throw new Error('Wallet not connected');\n            }\n\n            const requestData = {\n                source: 'gada-wallet-injected',\n                type: 'SIGN_TRANSACTION',\n                requestId: ++requestId,\n                transaction: this.serializeTransaction(transaction),\n                message: `Sign transaction from ${window.location.hostname}`\n            };\n\n            const response = await this.sendRequest(requestData);\n            \n            if (response.success) {\n                return this.deserializeTransaction(response.signature);\n            } else {\n                throw new Error(response.error || 'Transaction signing failed');\n            }\n        }\n\n        async signAllTransactions(transactions) {\n            if (!this._connected) {\n                throw new Error('Wallet not connected');\n            }\n\n            const requestData = {\n                source: 'gada-wallet-injected',\n                type: 'SIGN_ALL_TRANSACTIONS',\n                requestId: ++requestId,\n                transactions: transactions.map(tx => this.serializeTransaction(tx)),\n                message: `Sign ${transactions.length} transactions from ${window.location.hostname}`\n            };\n\n            const response = await this.sendRequest(requestData);\n            \n            if (response.success) {\n                return response.signatures.map(sig => this.deserializeTransaction(sig));\n            } else {\n                throw new Error(response.error || 'Transaction signing failed');\n            }\n        }\n\n        async signMessage(message, display = 'utf8') {\n            if (!this._connected) {\n                throw new Error('Wallet not connected');\n            }\n\n            const requestData = {\n                source: 'gada-wallet-injected',\n                type: 'SIGN_MESSAGE',\n                requestId: ++requestId,\n                message: this.encodeMessage(message),\n                display: display\n            };\n\n            const response = await this.sendRequest(requestData);\n            \n            if (response.success) {\n                return {\n                    signature: new Uint8Array(response.signature),\n                    publicKey: this.createPublicKey(response.publicKey)\n                };\n            } else {\n                throw new Error(response.error || 'Message signing failed');\n            }\n        }\n\n        async request(method, params) {\n            switch (method) {\n                case 'connect':\n                    return await this.connect(params);\n                \n                case 'disconnect':\n                    return await this.disconnect();\n                \n                case 'signTransaction':\n                    return await this.signTransaction(params.transaction);\n                \n                case 'signAllTransactions':\n                    return await this.signAllTransactions(params.transactions);\n                \n                case 'signMessage':\n                    return await this.signMessage(params.message, params.display);\n                \n                default:\n                    throw new Error(`Unsupported method: ${method}`);\n            }\n        }\n\n        // Event handling\n        on(event, handler) {\n            if (!this._eventHandlers) {\n                this._eventHandlers = {};\n            }\n            if (!this._eventHandlers[event]) {\n                this._eventHandlers[event] = [];\n            }\n            this._eventHandlers[event].push(handler);\n        }\n\n        off(event, handler) {\n            if (!this._eventHandlers || !this._eventHandlers[event]) {\n                return;\n            }\n            const index = this._eventHandlers[event].indexOf(handler);\n            if (index > -1) {\n                this._eventHandlers[event].splice(index, 1);\n            }\n        }\n\n        emit(event, ...args) {\n            if (!this._eventHandlers || !this._eventHandlers[event]) {\n                return;\n            }\n            this._eventHandlers[event].forEach(handler => {\n                try {\n                    handler(...args);\n                } catch (error) {\n                    console.error('Event handler error:', error);\n                }\n            });\n        }\n\n        // Helper methods\n        sendRequest(requestData) {\n            return new Promise((resolve, reject) => {\n                const timeout = setTimeout(() => {\n                    pendingRequests.delete(requestData.requestId);\n                    reject(new Error('Request timeout'));\n                }, 30000); // 30 second timeout\n\n                pendingRequests.set(requestData.requestId, { resolve, reject, timeout });\n                \n                window.postMessage(requestData, window.location.origin);\n            });\n        }\n\n        handleConnectResponse(message) {\n            const request = pendingRequests.get(message.requestId);\n            if (!request) return;\n\n            clearTimeout(request.timeout);\n            pendingRequests.delete(message.requestId);\n\n            if (message.success) {\n                request.resolve(message);\n            } else {\n                request.reject(new Error(message.error));\n            }\n        }\n\n        handleSignTransactionResponse(message) {\n            const request = pendingRequests.get(message.requestId);\n            if (!request) return;\n\n            clearTimeout(request.timeout);\n            pendingRequests.delete(message.requestId);\n\n            if (message.success) {\n                request.resolve(message);\n            } else {\n                request.reject(new Error(message.error));\n            }\n        }\n\n        handleSignAllTransactionsResponse(message) {\n            const request = pendingRequests.get(message.requestId);\n            if (!request) return;\n\n            clearTimeout(request.timeout);\n            pendingRequests.delete(message.requestId);\n\n            if (message.success) {\n                request.resolve(message);\n            } else {\n                request.reject(new Error(message.error));\n            }\n        }\n\n        handleSignMessageResponse(message) {\n            const request = pendingRequests.get(message.requestId);\n            if (!request) return;\n\n            clearTimeout(request.timeout);\n            pendingRequests.delete(message.requestId);\n\n            if (message.success) {\n                request.resolve(message);\n            } else {\n                request.reject(new Error(message.error));\n            }\n        }\n\n        handleGetAccountResponse(message) {\n            const request = pendingRequests.get(message.requestId);\n            if (!request) return;\n\n            clearTimeout(request.timeout);\n            pendingRequests.delete(message.requestId);\n\n            if (message.success) {\n                request.resolve(message);\n            } else {\n                request.reject(new Error(message.error));\n            }\n        }\n\n        handleAutoConnected(message) {\n            this._publicKey = this.createPublicKey(message.publicKey);\n            this._connected = true;\n            this._readyState = 'Connected';\n            \n            console.log('✅ Auto-connected to gado Wallet');\n            this.emit('connect', this._publicKey);\n        }\n\n        handleDisconnected() {\n            const wasConnected = this._connected;\n            \n            this._publicKey = null;\n            this._connected = false;\n            this._readyState = 'NotDetected';\n            \n            if (wasConnected) {\n                this.emit('disconnect');\n            }\n        }\n\n        handleAccountChanged(message) {\n            const oldPublicKey = this._publicKey;\n            this._publicKey = this.createPublicKey(message.publicKey);\n            \n            if (oldPublicKey && oldPublicKey.toString() !== this._publicKey.toString()) {\n                this.emit('accountChanged', this._publicKey);\n            }\n        }\n\n        handleNetworkChanged(message) {\n            this.emit('networkChanged', message.network);\n        }\n\n        async checkAutoConnect() {\n            try {\n                const requestData = {\n                    source: 'gada-wallet-injected',\n                    type: 'GET_ACCOUNT',\n                    requestId: ++requestId\n                };\n\n                const response = await this.sendRequest(requestData);\n                \n                if (response.success) {\n                    this._publicKey = this.createPublicKey(response.publicKey);\n                    this._connected = true;\n                    this._readyState = 'Connected';\n                }\n            } catch (error) {\n                // No auto-connect available\n                this._readyState = 'NotDetected';\n            }\n        }\n\n        createPublicKey(publicKeyString) {\n            // Create a minimal PublicKey-like object\n            return {\n                toString: () => publicKeyString,\n                toBase58: () => publicKeyString,\n                toBuffer: () => {\n                    // Simple base58 decode (for compatibility)\n                    const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n                    let result = [];\n                    let carry, j;\n                    \n                    for (let i = 0; i < publicKeyString.length; i++) {\n                        carry = ALPHABET.indexOf(publicKeyString[i]);\n                        if (carry < 0) throw new Error('Invalid character');\n                        \n                        for (j = 0; j < result.length; ++j) {\n                            carry += result[j] * 58;\n                            result[j] = carry & 255;\n                            carry >>= 8;\n                        }\n                        \n                        while (carry > 0) {\n                            result.push(carry & 255);\n                            carry >>= 8;\n                        }\n                    }\n                    \n                    return new Uint8Array(result.reverse());\n                },\n                equals: (other) => {\n                    return publicKeyString === (other.toString ? other.toString() : other);\n                }\n            };\n        }\n\n        serializeTransaction(transaction) {\n            // Convert transaction to serializable format\n            if (transaction.serialize) {\n                return Array.from(transaction.serialize({ requireAllSignatures: false }));\n            } else if (transaction instanceof Uint8Array) {\n                return Array.from(transaction);\n            } else {\n                throw new Error('Invalid transaction format');\n            }\n        }\n\n        deserializeTransaction(signatureData) {\n            // Create a transaction with signature\n            return {\n                signature: new Uint8Array(signatureData),\n                publicKey: this._publicKey\n            };\n        }\n\n        encodeMessage(message) {\n            if (typeof message === 'string') {\n                return Array.from(new TextEncoder().encode(message));\n            } else if (message instanceof Uint8Array) {\n                return Array.from(message);\n            } else {\n                throw new Error('Invalid message format');\n            }\n        }\n\n        getFaviconUrl() {\n            const favicon = document.querySelector('link[rel=\"icon\"], link[rel=\"shortcut icon\"]');\n            if (favicon) {\n                return favicon.href;\n            }\n            return `${window.location.origin}/favicon.ico`;\n        }\n    }\n\n    // Create and expose the wallet provider\n    const gadoWallet = new gadoWalletProvider();\n\n    // Make it available as window.solana for compatibility\n    Object.defineProperty(window, 'solana', {\n        value: gadoWallet,\n        writable: false,\n        configurable: false\n    });\n\n    // Also expose as gadoWallet for explicit access\n    Object.defineProperty(window, 'gadoWallet', {\n        value: gadoWallet,\n        writable: false,\n        configurable: false\n    });\n\n    // Dispatch ready event\n    setTimeout(() => {\n        window.dispatchEvent(new CustomEvent('gado-wallet-loaded', {\n            detail: { gadoWallet }\n        }));\n        \n        // Also dispatch standard Solana wallet events for compatibility\n        window.dispatchEvent(new CustomEvent('solana-wallet-loaded', {\n            detail: { solana: gadoWallet }\n        }));\n        \n        console.log('✅ gado Wallet provider ready');\n    }, 100);\n\n})();"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperties","_toPropertyKey","key","_typeof","toPrimitive","String","_toPrimitive","window","solana","isgadoWallet","console","log","requestId","pendingRequests","Map","gadoWalletProvider","_classCallCheck","this","isPhantom","_publicKey","_connected","_connecting","_readyState","setupMessageListener","checkAutoConnect","get","_this","addEventListener","event","source","origin","location","data","handleMessage","message","type","handleConnectResponse","handleSignTransactionResponse","handleSignAllTransactionsResponse","handleSignMessageResponse","handleGetAccountResponse","handleAutoConnected","handleDisconnected","handleAccountChanged","handleNetworkChanged","_connect","_callee","options","requestData","response","_this2","_args","_context","undefined","publicKey","reject","checkConnection","setTimeout","Error","appName","name","document","title","appIcon","icon","getFaviconUrl","onlyIfTrusted","sendRequest","success","createPublicKey","emit","error","_disconnect","_callee2","_context2","_signTransaction","_callee3","transaction","_context3","serializeTransaction","concat","hostname","deserializeTransaction","signature","_x","_signAllTransactions","_callee4","transactions","_this3","_context4","map","tx","signatures","sig","_x2","_signMessage","_callee5","display","_args5","_context5","encodeMessage","Uint8Array","_x3","_request","_callee6","method","params","_t","_context6","connect","disconnect","signTransaction","signAllTransactions","signMessage","_x4","_x5","handler","_eventHandlers","push","index","indexOf","splice","_len","args","Array","_key","forEach","timeout","set","postMessage","request","clearTimeout","wasConnected","oldPublicKey","toString","network","_checkAutoConnect","_callee7","_context7","publicKeyString","toBase58","toBuffer","carry","j","result","reverse","equals","other","serialize","from","requireAllSignatures","signatureData","TextEncoder","encode","favicon","querySelector","href","gadoWallet","dispatchEvent","CustomEvent","detail"],"sourceRoot":""}